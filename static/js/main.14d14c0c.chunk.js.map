{"version":3,"sources":["common/color.ts","components/card.tsx","components/field.tsx","common/generator.ts","common/inn_generator.ts","common/innfl_generator.ts","common/ogrn_generator.ts","common/ogrnip_generator.ts","common/snils_generator.ts","components/persons.tsx","common/bik_generator.ts","common/okpo_generator.ts","common/rand_generator.ts","common/korr_generator.ts","common/rs_generator.ts","components/bank_fields.tsx","components/string_data.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Colors","Card","bgColor","title","color","children","className","white","warning","light","dark","Field","name","generator","params","onUpdate","asText","useState","generate","val","setVal","valRefresh","newVal","useEffect","copyEventListener","e","clipboardData","setData","preventDefault","document","removeEventListener","copyToClipboard","addEventListener","execCommand","htmlFor","id","readOnly","value","type","onClick","placeholder","aria-label","aria-describedby","BaseGenerator","len","vocab","res","vLen","length","i","Math","floor","random","InnGenerator","this","generateRndStr","getCheckDigits","weightCoeff","sum","String","InnflGenerator","OgrnGenerator","firstDigit","rndLen","OgrnipGenerator","SnilsGenerator","showTwoDig","slice","showFormat","arrVal","split","splice","join","innGen","innFlGen","ogrnGen","ogrnipGen","snilsGen","Persons","info","danger","BikGenerator","coeffs","midDigits","indexOf","lastDigits","OkpoGenerator","firstCheckDig","getCheckDigit","secCheckDig","RandGenerator","param","KorrGenerator","currencies","rndCurrency","firstPart","lastPart","bikPart","bik","key","checkSum","console","log","checkSumCor","RsGenerator","bikGen","rndGen","okpoGen","korGen","rsGen","KppGenParam","BankFields","bikVal","setBikVal","secondary","rus","lat","digits","spec","validatorItems","toUpperCase","StringData","num","validator","valStr","setStrVal","currentValidator","find","el","genParam","undefined","primary","onChange","event","data","target","map","min","isNaN","onKeyPress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iJAAYA,E,gDAAAA,K,kBAAAA,E,sBAAAA,E,YAAAA,E,kBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,YAAAA,E,eAAAA,M,gBCQNC,EAAyB,SAAC,GAAD,IDIFC,ECJKC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,SAAjB,OAC7B,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAS,yBAAoBF,EAApB,kBDEYF,ECFmCE,EDG9CF,IAAYF,EAAOO,OAASL,IAAYF,EAAOQ,SAAWN,IAAYF,EAAOS,MAC3ET,EAAOU,KAAOV,EAAOO,QCJrC,SAAuEJ,IACvE,qBAAKG,UAAU,sBAAf,SACGD,Q,OCADM,EAA2B,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAAMT,EAAsD,EAAtDA,MAAQU,EAA8C,EAA9CA,UAAUC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,SAA4B,IAAnBC,cAAmB,SAC9F,EAAsBC,mBAAiBJ,EAAUK,SAASJ,IAA1D,mBAAOK,EAAP,KAAYC,EAAZ,KAEA,SAASC,IACP,IAAMC,EAAST,EAAUK,SAASJ,GAClCM,EAAOE,GACiB,oBAAdP,GACRA,EAASO,GAIbC,qBAAU,WACR,IAAMD,EAAST,EAAUK,SAASJ,GAClCM,EAAOE,GACPD,MACC,CAACP,EAAQD,IAEZ,IAAMW,EAAoB,SAApBA,EAAqBC,GACH,OAAnBA,EAAEC,gBACHD,EAAEC,cAAcC,QAAQ,aAAcR,GACtCM,EAAEG,iBACFC,SAASC,oBAAoB,OAAQN,KAIzC,SAASO,IACPF,SAASG,iBAAiB,OAAQR,GAClCK,SAASI,YAAY,QAEvB,OAAIjB,EAgBA,qCACE,uBAAOkB,QAAStB,EAAhB,SAAuBT,IACvB,qBAAKG,UAAU,aAAf,SACM,0BAAUA,UAAU,eAAe6B,GAAIvB,EAAMwB,UAAU,EAAMC,MAAOlB,MAE1E,sBAAKb,UAAU,aAAf,UACE,wBAAQA,UAAU,0BAA0BgC,KAAK,SAASC,QAASR,EAAnE,SAAoF,mBAAGzB,UAAU,kBACjG,wBAAQA,UAAU,4BAA4BgC,KAAK,SAASC,QAASlB,EAArE,SAAiF,mBAAGf,UAAU,wBArBlG,qCACE,uBAAO4B,QAAStB,EAAhB,SAAuBT,IACvB,sBAAKG,UAAS,4BAAuBM,EAAvB,SAAd,UACE,uBAAO0B,KAAK,OAAOhC,UAAU,eAAekC,YAAarC,EAAOsC,aAAYtC,EACrEuC,mBAAA,gBAA2B9B,GAAQuB,GAAIvB,EAAMwB,UAAU,EAAMC,MAAOlB,IAC3E,sBAAKb,UAAU,qBAAf,UACE,wBAAQA,UAAU,0BAA0BgC,KAAK,SAASC,QAASR,EAAnE,SAAoF,mBAAGzB,UAAU,kBACjG,wBAAQA,UAAU,4BAA4BgC,KAAK,SAASC,QAASlB,EAArE,SAAiF,mBAAGf,UAAU,4B,4BC1B3FqC,E,8FAhBb,SAAyBC,EAAaC,GACf,qBAAXA,IACRA,EAAQ,cAIV,IAFA,IAAIC,EAAM,GACJC,EAAOF,EAAMG,OACXC,EAAI,EAAGA,EAAGL,EAAKK,IAAK,CAE1BH,GAAOD,EADKK,KAAKC,MAAMD,KAAKE,SAAWL,IAGzC,OAAOD,M,KCDIO,E,8JAdb,WACE,IAAMP,EAAMQ,KAAKC,eAAe,GAChC,OAAOT,EAAMQ,KAAKE,eAAeV,EAAK,CAAC,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,M,4BAGlE,SAAyB3B,EAAasC,GAEpC,IADA,IAAIC,EAAM,EACFT,EAAI,EAAGA,EAAI9B,EAAI6B,OAAQC,IAC7BS,IAAQvC,EAAI8B,GAAKQ,EAAYR,GAE/B,OAAOU,OAAOD,EAAM,GAAK,Q,GAXFf,GCSZiB,E,8JAPb,WACE,IAAId,EAAMQ,KAAKC,eAAe,IAE9B,OADAT,GAAOQ,KAAKE,eAAeV,EAAK,CAAC,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,KAChDQ,KAAKE,eAAeV,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,Q,GAJ7CO,GCkBdQ,E,kDAhBb,aAAe,IAAD,8BACZ,gBAHQC,gBAEI,IADJC,YACI,EAEZ,EAAKD,WAAa,KAClB,EAAKC,OAAS,GAHF,E,4CAMd,WACE,IAAMjB,EAAMQ,KAAKC,eAAe,EAAGD,KAAKQ,YAAcR,KAAKC,eAAeD,KAAKS,QAC/E,OAAOjB,EAAMQ,KAAKE,gBAAgBV,K,4BAGpC,SAAyB3B,GACvB,OAAOwC,OAAOxC,EAAM,GAAK,Q,GAfDwB,GCYbqB,E,kDAXb,aAAe,IAAD,8BACZ,gBACKF,WAAa,IAClB,EAAKC,OAAS,GAHF,E,kDAMd,SAAyB5C,GACvB,OAAOwC,OAAOxC,EAAM,GAAK,Q,GARC0C,GC0BfI,E,4MAXLC,WAAa,SAAC/C,GAAD,MAAyB,WAAIA,GAAMgD,OAAO,I,8CAb/D,WACE,IAAMrB,EAAMQ,KAAKC,eAAe,GAChC,OAAOD,KAAKc,WAAWtB,EAAMQ,KAAKY,WAAWZ,KAAKE,eAAeV,O,4BAGnE,SAAyB3B,GAEvB,IADA,IAAIuC,EAAM,EACFT,EAAI,EAAGA,EAAI9B,EAAI6B,OAAQC,IAC7BS,IAAQvC,EAAI8B,IAAM,EAAEA,GAEtB,OAAQS,EAAM,IAAOA,EAAQA,GAAM,IAAO,EAAIA,EAAM,M,wBAKtD,SAAmBvC,GACjB,IAAIkD,EAASlD,EAAImD,MAAM,IAIvB,OAHAD,EAAOE,OAAO,EAAE,EAAE,KAClBF,EAAOE,OAAO,EAAE,EAAE,KAClBF,EAAOE,OAAO,GAAG,EAAE,KACZF,EAAOG,KAAK,Q,GAtBM7B,GCSvB8B,EAAS,IAAIpB,EACbqB,EAAW,IAAId,EACfe,EAAU,IAAId,EACde,EAAY,IAAIZ,EAChBa,EAAW,IAAIZ,EAEfa,EAAqB,WACzB,OACE,qCACE,qBAAKxE,UAAU,mBAAf,SACE,eAAC,EAAD,CAAMH,MAAM,+CAAYC,MAAOJ,EAAO+E,KAAtC,UACE,cAAC,EAAD,CAAOnE,KAAK,SAAST,MAAM,qBAAMU,UAAW6D,IAC5C,cAAC,EAAD,CAAO9D,KAAK,WAAWT,MAAM,iCAAQU,UAAWgE,SAGpD,qBAAKvE,UAAU,mBAAf,SACE,eAAC,EAAD,CAAMH,MAAM,eAAKC,MAAOJ,EAAOgF,OAA/B,UACE,cAAC,EAAD,CAAOpE,KAAK,SAAST,MAAM,qBAAMU,UAAW6D,IAC5C,cAAC,EAAD,CAAO9D,KAAK,UAAUT,MAAM,uCAASU,UAAW+D,SAGpD,qBAAKtE,UAAU,mBAAf,SACE,eAAC,EAAD,CAAMH,MAAM,yCAAWC,MAAOJ,EAAOQ,QAArC,UACE,cAAC,EAAD,CAAOI,KAAK,SAAST,MAAM,qBAAMU,UAAW4D,IAC5C,cAAC,EAAD,CAAO7D,KAAK,OAAOT,MAAM,2BAAOU,UAAW8D,aCnBtCM,E,8JAbb,WACE,IAAMC,EAAS,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MACjGC,EAAY,GAChB,GACEA,EAAY7B,KAAKC,eAAe,UACK,IAA9B2B,EAAOE,QAAQD,IAExB,IAAME,EAAanC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAgB,IACnD,MAAO,KAAO+B,EAAY7B,KAAKC,eAAe,IAAM8B,EAAa,IAAM,IAAK1B,OAAO0B,GAAc1B,OAAO0B,Q,GATjF1C,GCqBZ2C,E,8JApBb,WACE,IAAMxC,EAAMQ,KAAKC,eAAe,GAC1BgC,EAAgBjC,KAAKkC,cAAc1C,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACjE,GAAGyC,GAAgB,EACjB,OAAOzC,EAAKa,OAAO4B,GAEnB,IAAME,EAAcnC,KAAKkC,cAAc1C,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC/D,OAAOA,EAAKa,OAAO8B,EAAc,M,2BAIrC,SAAwBtE,EAAasC,GAEnC,IADA,IAAIC,EAAM,EACFT,EAAI,EAAGA,EAAI9B,EAAI6B,OAAQC,IAC7BS,IAAQvC,EAAI8B,GAAKQ,EAAYR,GAE/B,OAAOS,EAAM,O,GAjBWf,GCkBb+C,E,8JAbb,SAASC,GACP,IAAI/C,EAAM,GACP+C,GAASA,EAAM/C,MAChBA,EAAM+C,EAAM/C,KAEd,IAAIC,EAAQ,+DAIZ,OAHG8C,GAASA,EAAM9C,QAChBA,EAAQ8C,EAAM9C,OAETS,KAAKC,eAAeX,EAAIC,O,GAVPF,GCwCbiD,E,4MAxCHV,OAAuB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,G,EACpEW,WAA2B,CACnC,MACA,MACA,O,8CAEF,SAASF,GACP,IAAMG,EAAcxC,KAAKuC,WAAW3C,KAAKC,MAAMD,KAAKE,SAAWE,KAAKuC,WAAW7C,SACzE+C,EAAazC,KAAKC,eAAe,GACjCyC,EAAW1C,KAAKC,eAAe,IAC/B0C,EAAUN,EAAMO,IAAI/B,OAAO,GAC7BgC,EAAM,EAEVA,EADU7C,KAAK8C,SAASH,EAAUF,EAAYD,EAAcnC,OAAOwC,GAAOH,GAC5D,GAAK,EAAI,GAEvB,IAAM7E,EAAM4E,EAAYD,EAAcnC,OAAOwC,GAAOH,EAIpD,OAFAK,QAAQC,IAAIX,EAAMO,IAAK/E,EAAKmC,KAAKiD,YAAYpF,IAEtCA,I,sBAGT,SAAmBA,GAEjB,IADA,IAAIuC,EAAM,EACFT,EAAE,EAAGA,EAAE9B,EAAI6B,OAAQC,IACzBS,GAAOJ,KAAK4B,OAAOjC,IAAO9B,EAAI8B,GAEhC,OAAOS,I,yBAGT,SAAsBvC,GAEpB,IADA,IAAIuC,EAAM,EACFT,EAAE,EAAGA,EAAE9B,EAAI6B,OAAQC,IACzBS,GAAOJ,KAAK4B,OAAOjC,KAAO9B,EAAI8B,GAAK,IAErC,OAAOS,EAAM,KAAO,M,GApCIf,GCUb6D,E,8JAZb,SAASb,GACP,IAAMG,EAAcxC,KAAKuC,WAAW3C,KAAKC,MAAMD,KAAKE,SAAWE,KAAKuC,WAAW7C,SACzE+C,EAAazC,KAAKC,eAAe,GACjCyC,EAAW1C,KAAKC,eAAe,IAC/B0C,EAAUN,EAAMO,IAAI/B,OAAO,GAC7BgC,EAAM,EAGV,OADAA,EADU7C,KAAK8C,SAASH,EAAUF,EAAYD,EAAcnC,OAAOwC,GAAOH,GAC5D,GAAK,EAAK,GACjBD,EAAYD,EAAcnC,OAAOwC,GAAOH,M,GATzBJ,GCSpBa,EAAS,IAAIxB,EACbyB,EAAS,IAAIhB,EACbiB,EAAU,IAAIrB,EACdsB,EAAS,IAAIhB,EACbiB,EAAQ,IAAIL,EAEZM,EAA4B,CAChClE,IAAK,EACLC,MAAO,cAGHkE,EAAwB,WAC5B,MAA4B9F,mBAAiB,IAA7C,mBAAO+F,EAAP,KAAeC,EAAf,KAMA,OACE,qBAAK3G,UAAU,mBAAf,SACE,eAAC,EAAD,CAAMH,MAAM,oGAAoBC,MAAOJ,EAAOkH,UAA9C,UACE,cAAC,EAAD,CAAOtG,KAAK,WAAWT,MAAM,qBAAMU,UAAW4F,EAAQ1F,SAP5D,SAAmBI,GACjB8F,EAAU9F,MAON,cAAC,EAAD,CAAOP,KAAK,WAAWT,MAAM,qBAAMW,OAAQgG,EAAajG,UAAW6F,IACnE,cAAC,EAAD,CAAO9F,KAAK,YAAYT,MAAM,2BAAOU,UAAW8F,IAChD,cAAC,EAAD,CAAO/F,KAAK,UAAUT,MAAM,kFAAiBW,OAAS,CAACoF,IAAKc,GAA0BnG,UAAWgG,IACjG,cAAC,EAAD,CAAOjG,KAAK,UAAUT,MAAM,kIAAyBW,OAAS,CAACoF,IAAKc,GAA0BnG,UAAW+F,U,OC9B3GF,EAAS,IAAIhB,EAObyB,EAAM,mMACNC,EAAM,4BACNC,EAAS,aACTC,EAAO,kCACPC,EAAuC,CAC3C,CACE3G,KAAM,OACNuB,GAAI,OACJU,MAAOsE,EAAMA,EAAIK,cAAgBJ,EAAMA,EAAII,cAAgBH,EAASC,EAAO,OAE7E,CACE1G,KAAM,UACNuB,GAAI,UACJU,MAAOsE,EAAMA,EAAIK,cAAgBH,EAASC,IASxCG,EAAwB,WAC5B,MAA4BxG,mBAAuB,CAACyG,IAAK,IAAKC,UAAWJ,EAAe,GAAGpF,KAA3F,mBAAOyF,EAAP,KAAeC,EAAf,KACMC,EAAmBP,EAAeQ,MAAK,SAACC,GAC1C,OAAOA,EAAG7F,KAAOyF,EAAOD,aAEtBM,EAAyB,CAC7BpF,WAA4BqF,IAArBJ,EAAiC,GAAKA,EAAiBjF,MAC9DD,IAAKgF,EAAOF,KAsBd,OACE,qBAAKpH,UAAU,mBAAf,SACE,cAAC,EAAD,CAAMH,MAAM,8FAAmBC,MAAOJ,EAAOmI,QAA7C,SACE,sBAAK7H,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBAAO4B,QAAQ,4BAAf,oEACA,wBAAQ5B,UAAU,eAAe6B,GAAG,4BAA4BE,MAAOuF,EAAOD,UAAWS,SA1BrG,SAAyBC,GACvB,IAAIC,EAAI,eAAOV,GACfU,EAAKX,UAAYU,EAAME,OAAOlG,MAC9BwF,EAAUS,IAuBA,SACGf,EAAeiB,KAAI,SAACrH,GAAD,OAClB,wBAAqBkB,MAAOlB,EAAIgB,GAAhC,SACGhB,EAAIP,MADMO,EAAIgB,cAOzB,qBAAK7B,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBAAO4B,QAAQ,4BAAf,2HACA,uBAAOI,KAAK,OAAOhC,UAAU,eAAe6B,GAAG,wBACxCK,YAAY,OAAOH,MAAOuF,EAAOF,IAAKU,SAjCzD,SAAmBC,GACjB,IAAIC,EAAI,eAAOV,GACTzG,GAAOkH,EAAME,OAAOlG,MAC1BiG,EAAKZ,IAAMxE,KAAKuF,IAAKC,MAAMvH,IAAQA,EAAM,EAAK,EAAIA,EAAK,KACvD0G,EAAUS,IA6BkEK,WA1BxD,SAAClH,GACjBiH,OAAOjH,EAAE0E,MACX1E,EAAEG,yBA2BE,qBAAKtB,UAAU,SAAf,SACE,cAAC,EAAD,CAAOM,KAAK,WAAWT,MAAM,uCAASU,UAAW6F,EAAQ1F,QAAQ,EAAMF,OAAQmH,cC7D5EW,EApBH,kBACV,mCACE,qBAAKtI,UAAU,YAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,WAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,mBCJCuI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3H,SAAS4H,eAAe,SAM1BZ,M","file":"static/js/main.14d14c0c.chunk.js","sourcesContent":["export enum Colors {\r\n  primary = 'primary',\r\n  secondary = 'secondary',\r\n  info = 'info',\r\n  success = 'success',\r\n  warning = 'warning',\r\n  danger = 'danger',\r\n  light = 'light',\r\n  dark = 'dark',\r\n  white = 'white'\r\n}\r\n\r\nexport function getTextColor(bgColor: Colors):Colors {\r\n  const isLight = bgColor === Colors.white || bgColor === Colors.warning || bgColor === Colors.light;\r\n  return isLight ?  Colors.dark : Colors.white;\r\n}","import {Colors, getTextColor} from \"../common/color\";\nimport React from \"react\";\n\nexport interface ICard {\n  title?: string,\n  color: Colors\n}\n\nconst Card : React.FC<ICard> = ({ title, color, children }) => (\n  <div className=\"card\">\n    <h5 className={`card-header bg-${color} text-${getTextColor(color)}`}>{title}</h5>\n    <div className=\"card-body text-left\">\n      {children}\n    </div>\n  </div>\n);\nexport { Card };\n","import BaseGenerator,{ IGenParam } from \"../common/generator\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nexport interface IField {\r\n  name: string,\r\n  title: string,\r\n  asText?: boolean,\r\n  generator: BaseGenerator,\r\n  params?: IGenParam,\r\n  onUpdate?: (val: string)=> void\r\n}\r\n\r\nconst Field : React.FC<IField> = ({ name, title , generator,params, onUpdate,asText= false}) => {\r\n  const [val, setVal] = useState<string>(generator.generate(params));\r\n\r\n  function valRefresh() {\r\n    const newVal = generator.generate(params);\r\n    setVal(newVal);\r\n    if(typeof(onUpdate) === 'function') {\r\n      onUpdate(newVal);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const newVal = generator.generate(params);\r\n    setVal(newVal);\r\n    valRefresh();\r\n  }, [params, generator]);\r\n\r\n  const copyEventListener = (e: ClipboardEvent) => {\r\n    if(e.clipboardData!== null) {\r\n      e.clipboardData.setData('text/plain', val);\r\n      e.preventDefault();\r\n      document.removeEventListener('copy', copyEventListener);\r\n    }\r\n  }\r\n\r\n  function copyToClipboard() {\r\n    document.addEventListener('copy', copyEventListener);\r\n    document.execCommand('copy');\r\n  }\r\n  if(!asText) {\r\n    return (\r\n      <>\r\n        <label htmlFor={name}>{title}</label>\r\n        <div className={`input-group field-${name} mb-3`}>\r\n          <input type=\"text\" className=\"form-control\" placeholder={title} aria-label={title}\r\n                 aria-describedby={`basic-${name}`} id={name} readOnly={true} value={val}/>\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-outline-primary\" type=\"button\" onClick={copyToClipboard}><i className=\"far fa-copy\"></i></button>\r\n            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={valRefresh}><i className=\"fas fa-sync\"></i></button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <label htmlFor={name}>{title}</label>\r\n        <div className=\"form-group\">\r\n              <textarea className=\"form-control\" id={name} readOnly={true} value={val} />\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <button className=\"btn btn-outline-primary\" type=\"button\" onClick={copyToClipboard}><i className=\"far fa-copy\"></i></button>\r\n          <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={valRefresh}><i className=\"fas fa-sync\"></i></button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\nexport { Field };","export interface IGenParam {\r\n  len?: number\r\n};\r\n\r\nabstract class BaseGenerator {\r\n\r\n  abstract generate(param?: IGenParam): string\r\n\r\n  protected generateRndStr(len: number, vocab?: string|undefined):string {\r\n    if(typeof(vocab) === 'undefined') {\r\n      vocab = '0123456789';\r\n    }\r\n    let res = '';\r\n    const vLen = vocab.length;\r\n    for(let i = 0; i< len; i++) {\r\n      const pos = Math.floor(Math.random() * vLen);\r\n      res += vocab[pos];\r\n    }\r\n    return res;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default BaseGenerator;","import BaseGenerator from './generator';\n\nclass InnGenerator extends BaseGenerator {\n  generate():string {\n    const res = this.generateRndStr(9);\n    return res + this.getCheckDigits(res, [2, 4, 10, 3, 5, 9, 4, 6, 8]);\n  }\n\n  protected getCheckDigits(val: string, weightCoeff: Array<number>):string {\n    let sum = 0;\n    for(let i = 0; i < val.length; i++) {\n      sum += +val[i] * weightCoeff[i];\n    }\n    return String(sum % 11 % 10);\n  }\n}\n\nexport default InnGenerator;\n","import InnGenerator from \"./inn_generator\";\n\n\nclass InnflGenerator extends InnGenerator {\n  generate():string {\n    let res = this.generateRndStr(10);\n    res += this.getCheckDigits(res, [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n    return res + this.getCheckDigits(res, [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]);\n  }\n}\n\nexport default InnflGenerator;\n","import BaseGenerator from './generator';\r\n\r\nclass OgrnGenerator extends BaseGenerator {\r\n  protected firstDigit: string;\r\n  protected rndLen: number;\r\n  constructor() {\r\n    super();\r\n    this.firstDigit = '15';\r\n    this.rndLen = 11;\r\n  }\r\n\r\n  generate():string {\r\n    const res = this.generateRndStr(1, this.firstDigit) + this.generateRndStr(this.rndLen);\r\n    return res + this.getCheckDigits(+res);\r\n  }\r\n\r\n  protected getCheckDigits(val:number):string {\r\n    return String(val % 11 % 10);\r\n  }\r\n}\r\n\r\nexport default OgrnGenerator;","import OgrnGenerator from \"./ogrn_generator\";\r\n\r\nclass OgrnipGenerator extends OgrnGenerator {\r\n  constructor() {\r\n    super();\r\n    this.firstDigit = '3';\r\n    this.rndLen = 13;\r\n  }\r\n\r\n  protected getCheckDigits(val:number):string {\r\n    return String(val % 13 % 10);\r\n  }\r\n}\r\n\r\nexport default OgrnipGenerator;","import BaseGenerator from './generator';\r\n\r\nclass SnilsGenerator extends BaseGenerator {\r\n\r\n  generate():string {\r\n    const res = this.generateRndStr(9);\r\n    return this.showFormat(res + this.showTwoDig(this.getCheckDigits(res)));\r\n  }\r\n\r\n  protected getCheckDigits(val:string):number {\r\n    let sum = 0;\r\n    for(let i = 0; i < val.length; i++) {\r\n      sum += +val[i] * (9-i);\r\n    }\r\n    return (sum < 100) ? sum : ((sum <=101) ? 0 : sum % 101);\r\n  }\r\n\r\n  private showTwoDig = (val: number): string => `0${val}`.slice(-2);\r\n\r\n  private showFormat(val:string):string {\r\n    let arrVal = val.split('');\r\n    arrVal.splice(3,0,'-');\r\n    arrVal.splice(7,0,'-');\r\n    arrVal.splice(11,0,' ');\r\n    return arrVal.join('');\r\n  }\r\n}\r\n\r\nexport default SnilsGenerator;","import {Card} from \"./card\";\r\nimport {Colors} from \"../common/color\";\r\nimport {Field} from \"./field\";\r\nimport React from \"react\";\r\n\r\nimport InnGenerator from '../common/inn_generator';\r\nimport InnflGenerator from '../common/innfl_generator';\r\nimport OgrnGenerator from '../common/ogrn_generator';\r\nimport OgrnipGenerator from \"../common/ogrnip_generator\";\r\nimport SnilsGenerator from \"../common/snils_generator\";\r\n\r\nconst innGen = new InnGenerator();\r\nconst innFlGen = new InnflGenerator();\r\nconst ogrnGen = new OgrnGenerator();\r\nconst ogrnipGen = new OgrnipGenerator();\r\nconst snilsGen = new SnilsGenerator();\r\n\r\nconst Persons : React.FC = () => {\r\n  return (\r\n    <>\r\n      <div className=\"mb-5 text-center\">\r\n        <Card title=\"Физ. лицо\" color={Colors.info}>\r\n          <Field name=\"inn_fl\" title=\"ИНН\" generator={innFlGen} />\r\n          <Field name=\"snils_fl\" title=\"СНИЛС\" generator={snilsGen} />\r\n        </Card>\r\n      </div>\r\n      <div className=\"mb-5 text-center\">\r\n        <Card title=\"ИП\" color={Colors.danger}>\r\n          <Field name=\"inn_ip\" title=\"ИНН\" generator={innFlGen} />\r\n          <Field name=\"ogrn_ip\" title=\"ОГРНИП\" generator={ogrnipGen} />\r\n        </Card>\r\n      </div>\r\n      <div className=\"mb-5 text-center\">\r\n        <Card title=\"Юр. лицо\" color={Colors.warning}>\r\n          <Field name=\"inn_ul\" title=\"ИНН\" generator={innGen} />\r\n          <Field name=\"ogrn\" title=\"ОГРН\" generator={ogrnGen} />\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport { Persons };","import BaseGenerator from './generator';\r\n\r\nclass BikGenerator extends BaseGenerator {\r\n  generate():string {\r\n    const coeffs = ['02','06','09','13','16','21','23','31','39','43','48','51','55','59','62','67','72','74'];\r\n    let midDigits = '';\r\n    do {\r\n      midDigits = this.generateRndStr(2);\r\n    } while (coeffs.indexOf(midDigits)!== -1);\r\n\r\n    const lastDigits = Math.floor(Math.random() * 950+ 50);\r\n    return '04' + midDigits + this.generateRndStr(2) + (lastDigits < 100 ? '0'+ String(lastDigits) : String(lastDigits));\r\n  }\r\n\r\n}\r\n\r\nexport default BikGenerator;","import BaseGenerator from './generator';\r\n\r\nclass OkpoGenerator extends BaseGenerator {\r\n  generate():string {\r\n    const res = this.generateRndStr(7);\r\n    const firstCheckDig = this.getCheckDigit(res, [1, 2, 3, 4, 5, 6, 7]);\r\n    if(firstCheckDig <=9) {\r\n      return res+ String(firstCheckDig);\r\n    } else {\r\n      const secCheckDig = this.getCheckDigit(res, [3, 4, 5, 6, 7, 8, 9]);\r\n      return res+ String(secCheckDig % 10);\r\n    }\r\n  }\r\n\r\n  protected getCheckDigit(val: string, weightCoeff: Array<number>):number {\r\n    let sum = 0;\r\n    for(let i = 0; i < val.length; i++) {\r\n      sum += +val[i] * weightCoeff[i];\r\n    }\r\n    return sum % 11;\r\n  }\r\n}\r\n\r\nexport default OkpoGenerator;\r\n","import BaseGenerator, { IGenParam } from './generator';\n\nexport interface IRndGenParam extends IGenParam {\n  vocab?: string\n}\n\nclass RandGenerator extends BaseGenerator {\n  generate(param?: IRndGenParam):string {\n    let len = 10;\n    if(param && param.len) {\n      len = param.len;\n    }\n    let vocab = '0123456789abcdefghijklmnoprstuvwxyzABCDEFGHIJKLMNOPRSTUVWXYZ';\n    if(param && param.vocab) {\n      vocab = param.vocab;\n    }\n    return this.generateRndStr(len,vocab);\n  }\n}\n\nexport default RandGenerator;\n","import BaseGenerator, { IGenParam } from './generator';\r\nexport interface IKsGenParam extends IGenParam {\r\n  bik: string\r\n}\r\n\r\nclass KorrGenerator extends BaseGenerator {\r\n  protected coeffs:Array<number> = [7,1,3,7,1,3,7,1,3,7,1,3,7,1,3,7,1,3,7,1,3,7,1];\r\n  protected currencies:Array<string> = [\r\n    '643', //RUB\r\n    '840', //USD\r\n    '978'  //EUR,\r\n  ];\r\n  generate(param: IKsGenParam):string {\r\n    const rndCurrency = this.currencies[Math.floor(Math.random() * this.currencies.length)];\r\n    const firstPart =  this.generateRndStr(5);\r\n    const lastPart = this.generateRndStr(11);\r\n    const bikPart = param.bik.slice(-3);\r\n    let key = 0;\r\n    let sum = this.checkSum(bikPart + firstPart + rndCurrency + String(key) + lastPart);\r\n    key = ((sum % 10) *3) %10;\r\n\r\n    const val = firstPart + rndCurrency + String(key) + lastPart;\r\n\r\n    console.log(param.bik, val, this.checkSumCor(val));\r\n\r\n    return val;\r\n  }\r\n\r\n  protected checkSum(val:string):number {\r\n    let sum = 0;\r\n    for(let i=0; i<val.length; i++) {\r\n      sum += this.coeffs[i] * (+val[i]);\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  protected checkSumCor(val:string):boolean {\r\n    let sum = 0;\r\n    for(let i=0; i<val.length; i++) {\r\n      sum += this.coeffs[i] * (+val[i] % 10);\r\n    }\r\n    return sum % 10 !== 0;\r\n  }\r\n\r\n}\r\n\r\nexport default KorrGenerator;","import KorrGenerator, { IKsGenParam } from './korr_generator';\r\n\r\nclass RsGenerator extends KorrGenerator {\r\n  generate(param: IKsGenParam):string {\r\n    const rndCurrency = this.currencies[Math.floor(Math.random() * this.currencies.length)];\r\n    const firstPart =  this.generateRndStr(5);\r\n    const lastPart = this.generateRndStr(11);\r\n    const bikPart = param.bik.slice(-3);\r\n    let key = 0;\r\n    let sum = this.checkSum(bikPart + firstPart + rndCurrency + String(key) + lastPart);\r\n    key = ((sum % 10) *3) % 10;\r\n    return firstPart + rndCurrency + String(key) + lastPart;\r\n  }\r\n}\r\n\r\nexport default RsGenerator;","import React, { useState } from \"react\";\r\nimport {Card} from \"./card\";\r\nimport {Colors} from \"../common/color\";\r\nimport {Field} from \"./field\";\r\n\r\nimport BikGenerator from \"../common/bik_generator\";\r\nimport OkpoGenerator from \"../common/okpo_generator\";\r\nimport RandGenerator, {IRndGenParam} from \"../common/rand_generator\";\r\nimport KorrGenerator, {IKsGenParam} from \"../common/korr_generator\";\r\nimport RsGenerator from \"../common/rs_generator\";\r\n\r\nconst bikGen = new BikGenerator();\r\nconst rndGen = new RandGenerator();\r\nconst okpoGen = new OkpoGenerator();\r\nconst korGen = new KorrGenerator();\r\nconst rsGen = new RsGenerator();\r\n\r\nconst KppGenParam: IRndGenParam = {\r\n  len: 9,\r\n  vocab: '0123456789'\r\n};\r\n\r\nconst BankFields : React.FC = () => {\r\n  const [bikVal, setBikVal] = useState<string>('');\r\n\r\n  function updateBik(val: string):void {\r\n    setBikVal(val);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-5 text-center\">\r\n      <Card title=\"Банковские данные\" color={Colors.secondary}>\r\n        <Field name=\"bank_bik\" title=\"БИК\" generator={bikGen} onUpdate={updateBik}/>\r\n        <Field name=\"bank_kpp\" title=\"КПП\" params={KppGenParam} generator={rndGen} />\r\n        <Field name=\"bank_okpo\" title=\"ОКПО\" generator={okpoGen} />\r\n        <Field name=\"bank_rs\" title=\"Расчетный счет\" params={ {bik: bikVal } as IKsGenParam } generator={rsGen} />\r\n        <Field name=\"bank_ks\" title=\"Корреспондентский счет\" params={ {bik: bikVal } as IKsGenParam } generator={korGen} />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\nexport { BankFields };\r\n","import {Card} from \"./card\";\r\nimport {Colors} from \"../common/color\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Field} from \"./field\";\r\nimport RandGenerator, {IRndGenParam} from \"../common/rand_generator\";\r\n\r\nconst rndGen = new RandGenerator();\r\n\r\ninterface IValidatorItem {\r\n  name: string,\r\n  id: string,\r\n  vocab: string\r\n}\r\nconst rus = 'абвгдеёжзиклмнопрстуфхцчшщъыьэюя';\r\nconst lat = 'abcdefghijklmnoprstuvwxyz';\r\nconst digits = '0123456789';\r\nconst spec = '+-_^<>#№@«»&!/[]().,';\r\nconst validatorItems:Array<IValidatorItem> = [\r\n  {\r\n    name: 'main',\r\n    id: 'main',\r\n    vocab: rus + rus.toUpperCase() + lat + lat.toUpperCase() + digits + spec + ':;*'\r\n  },\r\n  {\r\n    name: 'main_ru',\r\n    id: 'main_ru',\r\n    vocab: rus + rus.toUpperCase() + digits + spec\r\n  }\r\n]\r\n\r\ninterface IStringState {\r\n  num: number,\r\n  validator: string\r\n}\r\n\r\nconst StringData : React.FC = () => {\r\n  const [valStr, setStrVal] = useState<IStringState>({num: 1000,validator: validatorItems[0].id});\r\n  const currentValidator = validatorItems.find((el) => {\r\n      return el.id === valStr.validator;\r\n    });\r\n  const genParam: IRndGenParam = {\r\n    vocab: currentValidator === undefined ? '' : currentValidator.vocab,\r\n    len: valStr.num\r\n  }\r\n\r\n  function changeValidator(event: ChangeEvent<HTMLSelectElement>) {\r\n    let data = {...valStr};\r\n    data.validator = event.target.value;\r\n    setStrVal(data);\r\n  }\r\n\r\n  function changeNum(event: ChangeEvent<HTMLInputElement>) {\r\n    let data = {...valStr};\r\n    const val = +event.target.value;\r\n    data.num = Math.min((isNaN(val) || val < 0) ? 0 : val, 5000);\r\n    setStrVal(data);\r\n  }\r\n\r\n  const pressInputKey = (e: KeyboardEvent<HTMLInputElement>) =>{\r\n    if( isNaN(+e.key)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-5 text-center\">\r\n      <Card title=\"Строковые данные\" color={Colors.primary}>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"exampleFormControlSelect1\">Валидатор</label>\r\n              <select className=\"form-control\" id=\"exampleFormControlSelect1\" value={valStr.validator} onChange={changeValidator}>\r\n                {validatorItems.map((val) => (\r\n                  <option key={val.id} value={val.id}>\r\n                    {val.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"exampleFormControlSelect1\">Количество символов</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\"\r\n                     placeholder=\"1000\" value={valStr.num} onChange={changeNum} onKeyPress={pressInputKey}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <Field name=\"rand_str\" title=\"Данные\" generator={rndGen} asText={true} params={genParam}/>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\nexport { StringData };","import React from 'react';\nimport './sass/styles.sass'\n\nimport { Persons } from './components/persons';\nimport {BankFields} from \"./components/bank_fields\";\nimport {StringData} from \"./components/string_data\";\n\nconst App = () => (\n  <>\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-sm-12\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-6\">\n              <Persons />\n            </div>\n            <div className=\"col-md-6\">\n              <BankFields />\n              <StringData />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}